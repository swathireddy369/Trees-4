/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    List<TreeNode> pPath;
    List<TreeNode> qPath;

    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        this.pPath = new ArrayList<>();
        this.qPath = new ArrayList<>();
        backTracking(root, p, q, new ArrayList<>());
        for (int i = 0; i < qPath.size(); i++) {
            if (pPath.get(i) != qPath.get(i)) {
                return pPath.get(i - 1);
            }
        }
        return null;
    }

    public void backTracking(TreeNode root, TreeNode p, TreeNode q, List<TreeNode> path) {
        if (root == null)
            return;
        // action
        path.add(root);
        if (root == p) {
            pPath = new ArrayList<>(path);
            pPath.add(root);
        }
        if (root == q) {
            qPath = new ArrayList<>(path);
            qPath.add(root);
        }
        // recurse
        backTracking(root.left, p, q, path);
        backTracking(root.right, p, q, path);
        // backtrack
        path.remove(path.size() - 1);

    }
}
//bottom up recursion

// Time Complexity :O(n) ->best case O(logn) worest case skew tree:O(n)
// Space Complexity :O(h)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) { val = x; }
 * }
 */

 class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || root == p || root == q) {
            return root;
        }
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        if(left == null &&right == null){
            return null;
        }
       else  if(left == null &&right != null){
            return right;
        }
        else if(left != null &&right == null){
            return left;
        }
         else{
            return root;
        }
    }

}